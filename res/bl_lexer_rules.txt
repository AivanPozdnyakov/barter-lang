start: importc* function+
?expr: log

?log: cond
    | log "and" cond -> and
    | log "or" cond -> or

?cond: sum 
    | cond "<" sum -> lt
    | cond "<=" sum -> le
    | cond ">" sum -> bt
    | cond ">=" sum -> be
    | cond "==" sum -> eq
    | cond "!=" sum -> neq

?sum: product
    | sum "+" product   -> add
    | sum "-" product   -> sub

?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div
    | product "%" atom  -> rem

boolean: "true" -> true
       | "false" -> false

?atom: NUMBER           -> number
     | "-" atom         -> unary_minus
     | "!" atom         -> neg
     | NAME             -> var
     | boolean          -> boolean
     | "(" log ")"
     | system_call
     | macro_call
     | function_call

params: (expr ("," expr )*)?

function_call: NAME "(" params ")"

generic_type: type
?system_call_param: generic_type | expr
system_call_params: (system_call_param ("," system_call_param )*)?
system_call: "@" NAME "(" system_call_params ")"

macro_call: "#" NAME "(" params ")"

type: "int" -> i32
    | "bool" -> i8
    | "float" -> f32
    | "*int" -> ptr_i32
    | "*bool" -> ptr_i8
    | "*float" -> ptr_f32

end: "}"
body: "{" statement* end
return_void: "return"
return: "return" expr
assigment: NAME "=" expr
declare_variable: type NAME "=" expr
expression: expr
?statement: ((return | return_void | expression | declare_variable | assigment) ";")
          | if | while

_block: "{" statement* "}"
if: "if" expr _block
while: "while" expr _block

?return_type: type
            | "void" -> void
dec_param: type NAME
dec_params: (dec_param ("," dec_param )*)?

function: "func" NAME "(" dec_params ")" "->" return_type _block

macro_params: (NAME ("," NAME )*)?
macro: "func" NAME "(" macro_params ")" _block

importc_params: (type ("," type )*)?
importc: "importc" NAME "(" importc_params ")" "->" return_type



COMMENT: /\/\/.*/
%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS_INLINE
%import common.WORD  
%import common.SIGNED_NUMBER
%import common.WS
%ignore WS
%ignore COMMENT