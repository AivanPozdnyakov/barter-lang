start: function+
?expr: cond

?cond: sum 
    | cond "<" sum -> lt
    | cond "<=" sum -> le
    | cond ">" sum -> bt
    | cond ">=" sum -> be
    | cond "==" sum -> eq
    | cond "!=" sum -> neq

?sum: product
    | sum "+" product   -> add
    | sum "-" product   -> sub

?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div

?atom: NUMBER           -> number
     | "-" atom         -> unary_minus
     | "!" atom         -> neg
     | NAME             -> var
     | "(" sum ")"
     | function_call

params: (expr ("," expr )*)?
function_call: NAME "(" params ")"

type: "int" -> int
dec_param: type NAME
dec_params: dec_param ("," dec_param )*
end: "}"
body: "{" statement* end
return: "return" expr
assigment: NAME "=" expr
declare_variable: type NAME "=" expr
expression: expr
?statement: ((return | expression | declare_variable | assigment) ";")
          | if | while

_block: "{" statement* "}"
if: "if" expr _block
while: "while" expr _block

return_type: type
            | "none" -> none

function_name: NAME
function: "func" function_name "(" dec_params? ")" "->" return_type _block


COMMENT: /\/\/.*/
%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS_INLINE
%import common.WORD  
%import common.SIGNED_NUMBER
%import common.WS
%ignore WS
%ignore COMMENT